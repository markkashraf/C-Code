
InterruptTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a9  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000579  00000000  00000000  000008e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002eb  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_2>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 84 00 	call	0x108	; 0x108 <main>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:




ISR(INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	//DDRD = 0xff;
	PORTD |= 1<<5;
  7c:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	2f ef       	ldi	r18, 0xFF	; 255
  80:	89 e6       	ldi	r24, 0x69	; 105
  82:	98 e1       	ldi	r25, 0x18	; 24
  84:	21 50       	subi	r18, 0x01	; 1
  86:	80 40       	sbci	r24, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <__vector_1+0x18>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <__vector_1+0x22>
  8e:	00 00       	nop
	_delay_ms(1000);
}
  90:	9f 91       	pop	r25
  92:	8f 91       	pop	r24
  94:	2f 91       	pop	r18
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <__vector_2>:

ISR(INT1_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
	//DDRD = 0xff;
	PORTD |= 1<<6;
  b0:	96 9a       	sbi	0x12, 6	; 18
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	89 e6       	ldi	r24, 0x69	; 105
  b6:	98 e1       	ldi	r25, 0x18	; 24
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <__vector_2+0x18>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <__vector_2+0x22>
  c2:	00 00       	nop
	_delay_ms(1000);
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_3>:

ISR(INT2_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	//DDRD = 0xff;
	PORTD |= 1<<7 ;
  e4:	97 9a       	sbi	0x12, 7	; 18
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	89 e6       	ldi	r24, 0x69	; 105
  ea:	98 e1       	ldi	r25, 0x18	; 24
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <__vector_3+0x18>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <__vector_3+0x22>
  f6:	00 00       	nop
	_delay_ms(1000);
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	2f 91       	pop	r18
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <main>:
	//STEP 1 : MCUCR (MCU Control Register)
	/* external interrupt is activated by setting bits in this register (ISC stands for interrupt sense control)
	bit 0 and bit 1 are used to control external interrupt 1 */

	//make int0 read any change
	SET_BIT(MCUCR,0);
 108:	85 b7       	in	r24, 0x35	; 53
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	85 bf       	out	0x35, r24	; 53
	RESET_BIT(MCUCR,1);
 10e:	85 b7       	in	r24, 0x35	; 53
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	85 bf       	out	0x35, r24	; 53
	//make int1 read rising edge 
	SET_BIT(MCUCR,2);
 114:	85 b7       	in	r24, 0x35	; 53
 116:	84 60       	ori	r24, 0x04	; 4
 118:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,3);
 11a:	85 b7       	in	r24, 0x35	; 53
 11c:	88 60       	ori	r24, 0x08	; 8
 11e:	85 bf       	out	0x35, r24	; 53
	//make int2 read falling edge
	// If ISC2 in register MCUCSR is written to zero, a falling edge on INT2 activates the interrupt.
	SET_BIT(MCUCSR,6);
 120:	84 b7       	in	r24, 0x34	; 52
 122:	80 64       	ori	r24, 0x40	; 64
 124:	84 bf       	out	0x34, r24	; 52
	
	//STEP 2 : GICR (General interrupt control register) which is used to enable interrupts on those pins
	SET_BIT(GICR,5);
 126:	8b b7       	in	r24, 0x3b	; 59
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,6);
 12c:	8b b7       	in	r24, 0x3b	; 59
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,7);
 132:	8b b7       	in	r24, 0x3b	; 59
 134:	80 68       	ori	r24, 0x80	; 128
 136:	8b bf       	out	0x3b, r24	; 59
	// enable interrupts SREG [global interrupt enable]
	sei();
 138:	78 94       	sei
		
	
	
    while(1)
    {
        RESET_BIT(PORTD,5);
 13a:	95 98       	cbi	0x12, 5	; 18
		RESET_BIT(PORTD,6);
 13c:	96 98       	cbi	0x12, 6	; 18
		RESET_BIT(PORTD,7);
 13e:	97 98       	cbi	0x12, 7	; 18
 140:	fc cf       	rjmp	.-8      	; 0x13a <main+0x32>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
